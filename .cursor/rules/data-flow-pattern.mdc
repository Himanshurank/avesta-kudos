---
description:
globs:
alwaysApply: false
---
# Data Flow Pattern

**Description:**
Defines the standard patterns for data flow through the TimeWarden application, covering UI interactions, data fetching, and persistence. This pattern ensures consistent, predictable data handling across the application.

## Overview

```
┌─────────────────────┐
│ UI Components       │
│ (React/Presentation)│
└─────────┬───────────┘
          │
          │ Events/Props
          │
          ▼
┌─────────────────────┐
│ Services            │
│ (Application)       │<─────┐
└─────────┬───────────┘      │
          │                  │
          │ Domain           │ Data Access
          │ Operations       │ Operations
          ▼                  │
┌─────────────────────┐      │
│ Domain Entities     │      │
│ (Domain)            │      │
└─────────────────────┘      │
                             │
┌─────────────────────┐      │
│ Repositories        │      │
│ (Infrastructure)    │──────┘
└─────────┬───────────┘
          │
          │ External
          │ Communication
          ▼
┌─────────────────────┐
│ Data Sources        │
│ (External Systems)  │
└─────────────────────┘
```

## Data Flow Patterns

### 1. UI to Application Flow

**Pattern:** Events Up, Props Down

1. User interactions trigger events (clicks, inputs, etc.)
2. Event handlers in components call service methods directly
3. Component state is updated based on service responses
4. Data flows back down as props to child components

**Example:**
```typescript
// src/presentation/components/TodoItem.tsx
const TodoItem = ({ todo, onComplete }) => {
  return (
    <div>
      <span>{todo.title}</span>
      <button onClick={() => onComplete(todo.id)}>Complete</button>
    </div>
  );
};

// src/presentation/pages/TodoPage.tsx
const TodoPage = ({ todoService }: { todoService: ITodoService }) => {
  const [todos, setTodos] = useState<Todo[]>([]);
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    const fetchTodos = async () => {
      setLoading(true);
      try {
        const fetchedTodos = await todoService.getTodos();
        setTodos(fetchedTodos);
      } catch (error) {
        console.error('Failed to fetch todos:', error);
      } finally {
        setLoading(false);
      }
    };

    fetchTodos();
  }, [todoService]);

  const handleCompleteTodo = async (id: string) => {
    try {
      await todoService.completeTodo(id);
      setTodos(todos.map(todo =>
        todo.id === id ? { ...todo, completed: true } : todo
      ));
    } catch (error) {
      console.error('Failed to complete todo:', error);
    }
  };

  return (
    <div>
      {loading ? <LoadingIndicator /> : (
        todos.map(todo => (
          <TodoItem
            key={todo.id}
            todo={todo}
            onComplete={handleCompleteTodo}
          />
        ))
      )}
    </div>
  );
};
```

### 2. Read Data Flow

**Pattern:** Repository → Service → UI

1. UI component needs data and triggers fetch directly from service
2. Service calls repository method to fetch data
3. Repository queries external data source (API, database)
4. Data flows back through same path, transforming as needed
5. UI updates its state with the fetched data and re-renders

**Example:**
```typescript
// Service implementation
export class TodoService implements ITodoService {
  constructor(private todoRepository: ITodoRepository) {}

  async getTodos(): Promise<Todo[]> {
    return await this.todoRepository.findAll();
  }
}

// UI component using the service
const TodoList = ({ todoService }: { todoService: ITodoService }) => {
  const [todos, setTodos] = useState<Todo[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<Error | null>(null);

  useEffect(() => {
    const fetchTodos = async () => {
      setLoading(true);
      try {
        const fetchedTodos = await todoService.getTodos();
        setTodos(fetchedTodos);
        setError(null);
      } catch (err) {
        setError(err instanceof Error ? err : new Error('Failed to fetch todos'));
      } finally {
        setLoading(false);
      }
    };

    fetchTodos();
  }, [todoService]);

  if (loading) return <LoadingSpinner />;
  if (error) return <ErrorMessage message={error.message} />;

  return (
    <ul>
      {todos.map(todo => (
        <TodoItem key={todo.id} todo={todo} />
      ))}
    </ul>
  );
};
```

### 3. Write Data Flow

**Pattern:** UI → Service → Repository → Data Source

1. User performs action requiring data change
2. Component captures input and calls service method
3. Service validates input and applies business rules
4. Service calls repository to persist changes
5. Repository updates external data source
6. Success/failure flows back up the chain
7. UI updates based on result

**Example:**
```typescript
// Component with user input
const AddTodoForm = ({ todoService }: { todoService: ITodoService }) => {
  const [title, setTitle] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<Error | null>(null);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!title.trim()) return;

    setLoading(true);
    setError(null);

    try {
      await todoService.addTodo({ title });
      setTitle('');
      // Optional: trigger parent component callback for UI update
    } catch (err) {
      setError(err instanceof Error ? err : new Error('Failed to add todo'));
    } finally {
      setLoading(false);
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      {error && <div className="error">{error.message}</div>}
      <input
        value={title}
        onChange={(e) => setTitle(e.target.value)}
        disabled={loading}
      />
      <button type="submit" disabled={loading}>
        {loading ? 'Adding...' : 'Add Todo'}
      </button>
    </form>
  );
};
```

### 4. Error Flow

**Pattern:** Source → Transform → Handle → Display

1. Error occurs in data source or business logic
2. Error is caught at appropriate layer
3. Technical errors transformed into domain/application errors
4. Error flows back up through services to UI
5. UI displays appropriate error message to user

**Example:**
```typescript
// Infrastructure layer error handling
export class TodoRepository implements ITodoRepository {
  async findAll(): Promise<Todo[]> {
    try {
      return await this.dataSource.todos.findMany();
    } catch (error) {
      // Transform technical error to domain error
      throw new RepositoryError('Failed to fetch todos', error);
    }
  }
}

// Application layer error handling
export class TodoService implements ITodoService {
  async getTodos(): Promise<Todo[]> {
    try {
      return await this.todoRepository.findAll();
    } catch (error) {
      if (error instanceof RepositoryError) {
        // Log or transform further if needed
        throw new ApplicationError('Unable to retrieve todos', error);
      }
      throw error;
    }
  }
}

// UI error handling
const TodoList = ({ todoService }: { todoService: ITodoService }) => {
  const [todos, setTodos] = useState<Todo[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<Error | null>(null);

  const fetchTodos = async () => {
    setLoading(true);
    try {
      const fetchedTodos = await todoService.getTodos();
      setTodos(fetchedTodos);
      setError(null);
    } catch (err) {
      setError(err instanceof Error ? err : new Error('Failed to fetch todos'));
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchTodos();
  }, [todoService]);

  if (loading) return <LoadingSpinner />;
  if (error) return <ErrorMessage message={error.message} retry={fetchTodos} />;

  return (
    <ul>
      {todos.map(todo => (
        <TodoItem key={todo.id} todo={todo} />
      ))}
    </ul>
  );
};
```

## Best Practices

1. **Unidirectional Data Flow:**
   - Data flows down, events flow up
   - Avoid bidirectional binding when possible
   - Maintain clear separation between state owners and consumers

2. **Component State Management:**
   - UI state: Kept in components (React state)
   - Application state: Managed by services in parent components
   - Domain state: Maintained in domain entities
   - Persistence state: Managed by repositories

3. **Data Transformation:**
   - Use DTOs for data transfer between layers
   - Use mappers to transform between domain and dto formats
   - Format data for presentation only at UI boundaries

4. **Error Handling:**
   - Catch errors at appropriate layer
   - Transform technical errors into domain/application errors
   - Provide meaningful error messages for users
   - Include retry mechanisms where appropriate

5. **Performance Optimization:**
   - Use memoization for expensive computations
   - Implement pagination for large data sets
   - Consider caching frequent data when appropriate
   - Implement optimistic updates for better UX
