---
description: Layered architecture that enforces clean separation of concerns, unidirectional dependencies, and domain-driven design. Uses TypeScript with strict patterns for entities, use cases, DTOs, and repositories. Includes comprehensive naming conventions, error handling, and validation rules.
globs:
alwaysApply: false
---
# Layered Architecture Guidelines

Reference: @Layered Architecture Guide

## Folder Structure

```
src/
├── domain/                 # Core business logic and rules
│   ├── entities/           # Business objects, core functionality
│   ├── interfaces/         # Contracts for repositories and services
│   ├── valueObjects/       # Immutable typed values
│   ├── enums/              # Type enumerations
│   └── errors/             # Domain-specific errors
├── application/            # Orchestrates domain logic
│   ├── useCases/           # Business operations (features)
│   ├── services/           # Domain services
│   ├── dtos/               # Data transfer objects
│   ├── mappers/            # Transform between layers
│   ├── validators/         # Validation logic
│   └── events/             # Application events
├── infrastructure/         # External implementations
│   ├── repositories/       # Data access implementations
│   ├── services/           # External service implementations
│   ├── api/                # API clients
│   ├── database/           # Database adapters
│   ├── cache/              # Caching mechanisms
│   └── config/             # Configuration
├── presentation/           # UI Layer
│   ├── pages/              # Page components
│   ├── components/         # UI components
│   ├── hooks/              # React hooks
│   ├── contexts/           # React contexts
│   ├── state/              # State management
│   └── utils/              # UI utilities
└── shared/                 # Cross-cutting concerns
    ├── utils/              # Common utilities
    ├── constants/          # Application constants
    ├── types/              # Shared type definitions
    ├── di/                 # Dependency injection
    └── logging/            # Logging functionality
```

## Layer Dependencies and Responsibilities

### 1. Domain Layer (`src/domain/`)
- **Dependencies**: None (innermost layer)
- **Responsibilities**: Core business logic and rules
- **Example Entity**:
```typescript
export class Resume {
  private _id: string;
  private _sections: ResumeSection[];
  private _lastUpdated: Date;

  constructor(id: string, sections: ResumeSection[]) {
    this._id = id;
    this._sections = sections;
    this._lastUpdated = new Date();
  }

  addSection(section: ResumeSection): void {
    if (this.hasSection(section.type)) {
      throw new Error(`Section of type ${section.type} already exists`);
    }
    this._sections.push(section);
    this._lastUpdated = new Date();
  }
}
```

- **Example Value Object**:
```typescript
export class DateRange {
  constructor(
    private readonly startDate: Date,
    private readonly endDate: Date
  ) {
    if (startDate > endDate) {
      throw new Error('Start date cannot be after end date');
    }
  }

  get start(): Date {
    return new Date(this.startDate);
  }

  get end(): Date {
    return new Date(this.endDate);
  }
}
```

### 2. Application Layer (`src/application/`)
- **Dependencies**: Domain Layer
- **Responsibilities**: Business operations orchestration
- **Example Use Case**:
```typescript
export class CreateResumeUseCase {
  constructor(
    private resumeRepository: IResumeRepository,
    private eventBus: IEventBus
  ) {}

  async execute(params: CreateResumeParams): Promise<ResumeDto> {
    // Validation
    if (!this.isValidParams(params)) {
      throw new ValidationError("Invalid parameters");
    }

    // Business logic
    const resume = new Resume(generateId(), params.sections);
    await this.resumeRepository.save(resume);

    // Events
    this.eventBus.publish("RESUME_CREATED", { id: resume.id });

    return ResumeMapper.toDto(resume);
  }
}
```

- **Example DTO**:
```typescript
export interface ResumeDto {
  id: string;
  sections: ResumeSectionDto[];
  lastUpdated: string;
  status: EResumeStatus;
}
```

### 3. Infrastructure Layer (`src/infrastructure/`)
- **Dependencies**: Domain Layer
- **Responsibilities**: External implementations
- **Example Repository**:
```typescript
export class ResumeRepositoryImpl implements IResumeRepository {
  constructor(private dataSource: DataSource) {}

  async findById(id: string): Promise<Resume | null> {
    try {
      const record = await this.dataSource.query(
        "SELECT * FROM resumes WHERE id = ?",
        [id]
      );
      return record ? this.mapToDomain(record) : null;
    } catch (error) {
      throw new RepositoryError("Failed to find resume", error);
    }
  }
}
```

### 4. Presentation Layer (`src/presentation/`)
- **Dependencies**: Application Layer
- **Responsibilities**: UI and user interaction
- **Example Component**:
```typescript
export function ResumeEditor() {
  const { resume, loading, error } = useResume();
  const { updateResume } = useResumeActions();

  if (loading) return <Spinner />;
  if (error) return <ErrorMessage message={error.message} />;

  return (
    <div>
      <h1>Resume Editor</h1>
      <ResumeForm resume={resume} onSubmit={updateResume} />
    </div>
  );
}
```

## Naming Conventions

### File Naming
- Use kebab-case for file names
- Add appropriate suffixes:
  - `.entity.ts` for domain entities
  - `.interface.ts` for interfaces
  - `.use-case.ts` for use cases
  - `.component.tsx` for React components
  - `.page.tsx` for page components
  - `.hook.ts` for custom hooks

### Code Naming
- **Domain Layer**:
  - Entities: PascalCase (e.g., `Resume`, `User`)
  - Interfaces: `I` prefix (e.g., `IResumeRepository`)
  - Enums: `E` prefix (e.g., `EResumeStatus`)
  - Value Objects: PascalCase (e.g., `DateRange`)

- **Application Layer**:
  - Use Cases: Verb + Noun + "UseCase" (e.g., `CreateResumeUseCase`)
  - Services: Noun + "Service" (e.g., `ResumeValidationService`)
  - DTOs: Noun + "Dto" (e.g., `ResumeDto`)

- **Infrastructure Layer**:
  - Implementations: Interface name + "Impl" (e.g., `ResumeRepositoryImpl`)
  - API Clients: Noun + "ApiClient" (e.g., `ResumeApiClient`)

- **Presentation Layer**:
  - Components: PascalCase (e.g., `ResumeEditor`)
  - Pages: Noun + "Page" (e.g., `ResumeEditorPage`)
  - Hooks: "use" + Feature (e.g., `useResume`)

## Best Practices

### Domain Layer
1. Keep business rules in domain objects
2. Use value objects for complex attributes
3. Make entities immutable when possible
4. Validate all inputs in constructors
5. Use domain events for side effects
6. Keep domain layer framework-agnostic
7. Document invariants and constraints

### Application Layer
1. Use dependency injection
2. Keep use cases focused
3. Handle all error cases
4. Use DTOs for data transfer
5. Implement proper validation
6. Use mappers for transformations
7. Document service methods
8. Keep services stateless

### Infrastructure Layer
1. Implement retry logic for external calls
2. Use proper caching strategies
3. Handle network errors gracefully
4. Implement proper logging
5. Document API endpoints
6. Use connection pooling
7. Implement circuit breakers

### Presentation Layer
1. Follow atomic design principles
2. Keep components pure when possible
3. Implement proper loading states
4. Use error boundaries
5. Use proper prop types
6. Document component props
7. Implement proper accessibility

## Anti-patterns to Avoid
1. Layer skipping
2. Domain layer with external dependencies
3. Business logic in infrastructure
4. Circular dependencies
5. Fat controllers/components
6. Leaky abstractions
7. Monolithic services
