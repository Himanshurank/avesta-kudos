---
description: Atomic Architecture is a software design methodology that organizes components hierarchically (atoms, molecules, organisms, templates, pages), enabling development of complex applications through composition of reusable parts. It establishes clear data flow patterns, enforces consistent naming and directory structures, and improves maintainability by isolating components. This pattern works across frontend frameworks and can extend to backend services, promoting code reuse and development efficiency.
globs:
alwaysApply: false
---
# Atomic Design Principles

Follow these guidelines when creating UI components to ensure a consistent and maintainable component hierarchy. This methodology breaks down interfaces into five distinct levels (atoms, molecules, organisms, templates, and pages), helping to build component systems in a modular, reusable, and organized way. These principles are essential for creating scalable UIs, consistent user experiences, and efficient development workflows.

## Component Hierarchy

### Atoms
- Located in `src/components/atoms/`
- Smallest UI building blocks (buttons, inputs, icons)
- Should be highly reusable and stateless
- Focus on a single UI element
- Examples: Button, Input, Icon, Typography

### Molecules
- Located in `src/components/molecules/`
- Combinations of atoms that work together
- Form small functional groups
- Still relatively simple and focused
- Examples: SearchInput (input + button), FormField (label + input)

### Organisms
- Located in `src/components/organisms/`
- Complex UI sections made of molecules and atoms
- Self-contained components that represent distinct sections
- May maintain their own state
- Examples: Forms, Headers, Navigation menus

### Templates
- Located in `src/components/templates/`
- Page layouts without specific content
- Define structure and placement of organisms
- Handle responsiveness and layout concerns
- Examples: DashboardTemplate, ResumeEditorTemplate

### Pages
- Located in `src/pages/`
- Complete views with actual content
- Combine templates with real data
- Handle page-specific logic and state

## Implementation Guidelines

- Components should be built from the atomic level up
- Higher-level components should only import from lower levels (or same level)
- Keep styling consistent using shared design tokens
- Use TypeScript interfaces to define component props
- Include helpful prop comments for complex components
- Implement responsive design at appropriate levels

## Component Naming Conventions

- Use PascalCase for component names
- Name files after the component they contain
- Prefix atoms with their type (e.g., ButtonPrimary, InputText)
- Use descriptive names for all components
- Include type suffix as needed (e.g., ResumeForm, UserCard)
